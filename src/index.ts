import { app, BrowserWindow, screen } from "electron";
import express, { Express } from "express";
import fs from "fs";
import path from "path";

type ScaleMode = "fit-preserve-aspect" | "unchanged"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Path to the .liv-port file using the current working directory
const portFilePath = path.join(process.cwd(), ".liv-port");

// Variable to hold the Express server reference
let expressServer: ReturnType<Express['listen']> | null = null;

// Create the Express server
const createExpressServer = async (): Promise<void> => {
  const expressApp = express();

  // A route meant for clients to upload images as pixel data
  // It is called /pixels instead of /upload since it
  // is not uploading a file, just uploading pixel data
  // This is why a name is needed as it cannot be derived from
  // a file path
  expressApp.post('/pixels', (req, res) => {
    const reqObject = req.body;
    const imageName = reqObject.name;
    const imageWidth = reqObject.width;
    const imageHeight = reqObject.height;
    // will decide what form of encoding or compression later
    // Sending numeric data as JSON is a recipe for disaster
    // Maybe simply encoding pixel bytes into base64 is good enough
    // That avoids all the extra quotes, commas, and characters
    const pixelDataEncoded = reqObject.pixels;
  });

  expressServer = expressApp.listen(0, () => {
    const port = (expressServer!.address() as { port: number }).port;
    console.log(`Server listening at http://localhost:${port}`);
    fs.writeFileSync(portFilePath, port.toString());
  });
};

// Create the Electron window
const createWindow = (): void => {
  const { width, height } = screen.getPrimaryDisplay().workAreaSize;

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width,
    height,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// Wait for both the Express server and Electron to be ready
const initializeApp = async (): Promise<void> => {
  await createExpressServer();
  
  app.on("ready", createWindow);
};

// Initialize the application
initializeApp().catch((err) => console.error(err));

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Cleanup procedure before quitting the app
app.on("before-quit", () => {
  // Close the Express server
  if (expressServer) {
    expressServer.close(() => {
      console.log("Express server closed");
    });
  }

  // Remove the .liv-port file
  if (fs.existsSync(portFilePath)) {
    fs.unlinkSync(portFilePath);
    console.log(".liv-port file removed");
  }
})